[
    {
        "title": "Find Unique Pairs with Given Sum",
        "description": "Write a function `find_pairs(nums, target)` that returns unique pairs of integers from a list `nums` that add up to a given `target`. Ensure pairs are unique and the output is sorted.",
        "testCases": [
            {
                "input": "[[1, 2, 3, 4, 3], 6]",
                "output": "[[2, 4], [3, 3]]"
            },
            {
                "input": "[[0, -1, 2, -3, 1], -2]",
                "output": "[[-3, 1]]"
            }
        ],
        "solution": "def find_pairs(nums, target):\n    seen, pairs = set(), set()\n    for num in nums:\n        if target - num in seen:\n            pairs.add(tuple(sorted((num, target - num))))\n        seen.add(num)\n    return sorted(list(pairs))",
        "difficulty": "medium",
        "company": "Amazon",
        "position": "Python Developer I"
    },
    {
        "title": "Validate Parentheses",
        "description": "Write a function `is_valid_parentheses(s)` that checks if a string of parentheses is valid, meaning each open parenthesis has a corresponding closing one in the correct order.",
        "testCases": [
            {
                "input": "'()[]{}'",
                "output": "true"
            },
            {
                "input": "'(]'",
                "output": "false"
            }
        ],
        "solution": "def is_valid_parentheses(s):\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in s:\n        if char in mapping:\n            top = stack.pop() if stack else '#'\n            if mapping[char] != top:\n                return False\n        else:\n            stack.append(char)\n    return not stack",
        "difficulty": "easy",
        "company": "Google",
        "position": "Python Developer I"
    },
    {
        "title": "Find the Maximum Profit in Stock Prices",
        "description": "Write a function `max_stock_profit(prices)` that takes a list of stock prices and returns the maximum profit achievable by buying and selling once.",
        "testCases": [
            {
                "input": "[7, 1, 5, 3, 6, 4]",
                "output": "5"
            },
            {
                "input": "[7, 6, 4, 3, 1]",
                "output": "0"
            }
        ],
        "solution": "def max_stock_profit(prices):\n    min_price, max_profit = float('inf'), 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit",
        "difficulty": "easy",
        "company": "Amazon",
        "position": "Python Developer II"
    },
    {
        "title": "Merge Overlapping Intervals",
        "description": "Write a function `merge_intervals(intervals)` that merges all overlapping intervals in a list of intervals.",
        "testCases": [
            {
                "input": "[[1, 3], [2, 6], [8, 10], [15, 18]]",
                "output": "[[1, 6], [8, 10], [15, 18]]"
            },
            {
                "input": "[[1, 4], [4, 5]]",
                "output": "[[1, 5]]"
            }
        ],
        "solution": "def merge_intervals(intervals):\n    intervals.sort(key=lambda x: x[0])\n    merged = []\n    for interval in intervals:\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    return merged",
        "difficulty": "medium",
        "company": "Google",
        "position": "Python Developer II"
    },
    {
        "title": "Find Minimum in Rotated Sorted Array",
        "description": "Write a function `find_min_rotated(arr)` to find the minimum element in a rotated sorted array without duplicates.",
        "testCases": [
            {
                "input": "[4, 5, 6, 7, 0, 1, 2]",
                "output": "0"
            },
            {
                "input": "[11, 13, 15, 17]",
                "output": "11"
            }
        ],
        "solution": "def find_min_rotated(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]",
        "difficulty": "hard",
        "company": "Amazon",
        "position": "Python Developer I"
    }
]
